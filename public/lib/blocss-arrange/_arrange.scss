/*! blocss-arrange v1.0.1 | MIT License | github.com/Blocss */

/*----------------------------------------------------------------------------*\
    ARRANGE
    This component lets you lay out a row of cells in various ways. You can
    specify whether a cell should be wide enough to fit its content, or take up
    the remaining space in the row. It's also possible to give all cells an
    equal width, and to control their vertical alignment.
\*----------------------------------------------------------------------------*/

/**
 * Example usage:
 *
<div class="arrange">
    <div class="arrange__size-fit">
        <img src="img.png" alt="">
    </div>
    <div class="arrange__size-fill">
        Bram Smulders @bramsmulders
        â€¦
    </div>
</div>
 */

/*  Variables
\*----------------------------------------------------------------------------*/

// Module can be disabled by switching `$use-arrange` to `false`
$use-arrange:               true                            !default;

/**
 * Define which namespaced breakpoints you would like to collapse the arrange
 *
 * $breakpoint-has-x:       ('palm', 'desk');
 *
 * Note: the name of the breakpoint must exist in the list of `$breakpoints`
 *       in the Blocss base repository
 */
$breakpoint-has-collapsed-arrange:  ()                      !default;



/*  Mixins
\*----------------------------------------------------------------------------*/

/**
 * Mixin: Reset arranged modules
 *
 * 1. Reset display property
 * 2. 100% width
 * 3. Reset padding in case of `.arrange--gutter`
 * 4. Re-initiate fluid images
 */
@mixin arrange-collapse () {
    display: block; /* 1 */

    > .arrange__size-fill,
    > .arrange__size-fit {
        display: block; /* 1 */
        width: 100%; /* 2 */
        padding-left: 0; /* 3 */

        img {
            max-width: 100%; /* 4 */
            height: auto; /* 4 */
        }
    }
}


/*  Core arrange componet
\*----------------------------------------------------------------------------*/

@if $use-arrange == true{

/**
 * `arrange` must only contain 'arrange__size-fit' and 'arrange__size-fill' child
 * nodes.
 *
 * It's recommended that you only use one 'arrange__size-fill' per component
 * instance (unless using the `arrange--equally` modifier; see below). The
 * first 'arrange__size-fill' in the component's source order will not share the
 * extra space with any subsequent nodes of that class.
 */

/**
 * 1. Rely on table layout.
 * 2. Zero out the default spacing that might be on an element (e.g., `ul`).
 * 3. Reset the table-layout algorithm in case a component is nested.
 * 4. Make sure the component fills the full width of its parent.
 */
.arrange {
    display: table; /* 1 */
    margin: 0; /* 2 */
    padding: 0; /* 2 */
    table-layout: auto; /* 3 */
    width: 100%; /* 4 */
}


    /**
     * There are two possible types of child.
     * `size-fill` will expand to fill all of the remaining space not filled by
     * `size-fit` elements.
     *
     * 1. Zero out any default spacing that might be on an element (e.g., `li`);
     *    Margin has no effect when coupled with `display: table-cell`.
     * 2. All cells are top-aligned by default
     */
    .arrange__size-fill,
    .arrange__size-fit {
        display: table-cell;
        padding: 0; /* 1 */
        vertical-align: top; /* 2 */
    }


    /**
     * Make sure the main content block expands to fill the remaining space.
     */
    .arrange__size-fill {
        width: 100%;
    }


        /**
         * Defend against a side-effect of this layout pattern: images in
         * 'arrange__size-fit' cannot be fluid, otherwise they lose their ability to
         * provide size to a cell.
         */
        .arrange__size-fit img {
            max-width: none;
            width: auto;
        }



/* Vertical alignment modifiers
\*----------------------------------------------------------------------------*/

.arrange--top {

    > .arrange__size-fill,
    > .arrange__size-fit {
        vertical-align: top;
    }
}

.arrange--middle {

    > .arrange__size-fill,
    > .arrange__size-fit {
        vertical-align: middle;
    }
}

.arrange--bottom {

    > .arrange__size-fill,
    > .arrange__size-fit {
        vertical-align: bottom;
    }
}



/* Equal-width modifier
\*----------------------------------------------------------------------------*/

/**
 * This layout algorithm will create equal-width table cells, irrespective of
 * the width of their content.
 */
.arrange--equal {
    table-layout: fixed;

    /**
     * Give the cells an equal width.
     * It's recommended that only 'Arrange-sizeFill' be used for equal width cells.
     * Their inner images will automatically be responsive.
     */
    > .arrange__size-fill,
    > .arrange__size-fit {
        width: auto;
    }
}



/* Gutter-separating modifier
\*----------------------------------------------------------------------------*/

.arrange--gutter {

    > .arrange__size-fill,
    > .arrange__size-fit {
        @include rem(padding-left, $space);

        &:first-child {
            padding-left: 0;
        }
    }
}



/* Arrange collapse
\*----------------------------------------------------------------------------*/

.arrange--collapse {
    @include arrange-collapse;
}



/*  Responsive
\*----------------------------------------------------------------------------*/

/* Collapsed arrange based on breakpoint */
@each $state in $breakpoint-has-collapsed-arrange {
    @include media-query(#{$state}) {
        .arrange--collapse--#{$state} {
            @include arrange-collapse;
        }
    }
}
}